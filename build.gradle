import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'nu.studer:gradle-jooq-plugin:2.0.7'
        classpath "gradle.plugin.com.boxfuse.client:flyway-release:$flywayVersion"
        classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.6.2'
    }
}

apply plugin: 'docker-compose'

ext {
    tlsCertsDir = file("${project(':tls-test-certs').projectDir}/certs")
    tlsHostKeystore = file("$tlsCertsDir/host_keystore.jks")
    tlsClientKeystore = file("$tlsCertsDir/client.p12")
    tlsTruststore = file("$tlsCertsDir/truststore.jks")
    tlsPassword = 'tlspassword'
}

allprojects {
    buildscript {
        repositories {
            maven {
                url 'https://plugins.gradle.org/m2/'
            }
        }
    }

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'docker-compose'

    repositories {
        jcenter()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
        }

        dependencies {
            dependency "com.h2database:h2:$h2DatabaseVersion"
            dependency "com.shazam:shazamcrest:$shazamcrestVersion"
            dependency "javax.ws.rs:javax.ws.rs-api:$jaxRsApiVersion"
            dependency "org.apache.commons:commons-lang3:$apacheCommonsLangVersion"
            dependency "org.apache.cxf:cxf-spring-boot-starter-jaxrs:$apacheCxfVersion"
            dependency "org.fluttercode.datafactory:datafactory:$datafactoryVersion"
            dependency "org.flywaydb:flyway-core:$flywayVersion"
            dependency "org.postgresql:postgresql:$postgresqlVersion"
        }
    }

    group = 'org.dylanpiergies.contacts'
    version = '0.0.1-SNAPSHOT'

    tasks.withType(AbstractArchiveTask) {
        // Exclude version number from archive names to simplify Docker deployment
        version = null
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.8'
        options.encoding = 'UTF-8'
    }

    def composeFiles = ["$rootDir/docker-compose-dev.yml"]

    dockerCompose {
        useComposeFiles = composeFiles
        forceRecreate = true
        captureContainersOutput = true
    }
}

// Add API projects to this list. Common configuration will be applied to them.
Set<Project> apiProjects = [
    project(':contacts-api')
]

// Add frontend service projects to this list. Common configuration will be applied to them.
Set<Project> frontendServiceProjects = [
    project(':contacts-caching-service')
]

// Add persistence service projects to this list. They will be configured with database access capabilities.
Set<Project> jooqProjects = [
    project(':contacts-persistence-service')
]

// Add integration test projects to this list. Common configuration will be applied to them.
Set<Project> testProjects = [
	project(':contacts-test')
]

// Add all Java projects to this list. Common configuration will be applied to them.
Set<Project> javaProjects = apiProjects + frontendServiceProjects + jooqProjects + testProjects + [
    project(':common-jaxrs'),
    project(':common-jooq')
]

// Common configuration for all Java projects
configure(javaProjects) {
    apply plugin: 'java'
    apply plugin: 'jacoco'
}

// Common configuration for API projects
configure(apiProjects) {
    dependencies {
        compile 'javax.ws.rs:javax.ws.rs-api'
        compile 'javax.validation:validation-api'
    }
}

// Common configuration for service projects
configure(frontendServiceProjects + jooqProjects) {
    apply plugin: 'org.springframework.boot'

    dependencies {
        compile project(':common-jaxrs')

        compile 'org.springframework.boot:spring-boot-starter'
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-actuator'
        compile 'org.springframework.boot:spring-boot-starter-validation'

        compile 'org.springframework.boot:spring-boot-devtools'

        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'com.shazam:shazamcrest'
    }

    bootRun {
        args = ['--spring.profiles.active=dev']
    }

    processResources {
        filter ReplaceTokens, tokens: [
            "project.buildDir": project.buildDir.path
        ]
    }

    processTestResources {
        dependsOn ':tls-test-certs:build'

        filter ReplaceTokens, tokens: [
            "tls.hostKeystore"  : tlsHostKeystore.path,
            "tls.clientKeystore": tlsClientKeystore.path,
            "tls.truststore"    : tlsTruststore.path,
            "tls.password"      : tlsPassword
        ]
    }
}

// Common configuration for database accessing projects
configure(jooqProjects) {
    apply plugin: 'org.flywaydb.flyway'
    apply plugin: 'nu.studer.jooq'

    dependencies {
        compile project(':common-jooq')
        compile 'org.flywaydb:flyway-core'

        runtime 'org.postgresql:postgresql'
        runtime 'com.h2database:h2'

        jooqRuntime 'org.postgresql:postgresql'
        jooqRuntime 'com.h2database:h2'
    }

    def schemaName = project.name.replace('-persistence-service', '')
    def codegenDatabaseUrl = "jdbc:h2:$buildDir/db/codegen-db;INIT=CREATE SCHEMA IF NOT EXISTS \"$schemaName\"\\;SET SCHEMA \"$schemaName\""

    flyway {
        url = codegenDatabaseUrl
    }

    jooq {
        db(sourceSets.main) {
            jdbc {
                driver = 'org.h2.Driver'
                url = codegenDatabaseUrl
            }
            generator {
                name = 'org.jooq.util.DefaultGenerator'
                database {
                    name = 'org.jooq.util.h2.H2Database'
                    includes = '.*'
                    excludes = ''
                    inputSchema = schemaName
                }
                target {
                    packageName = "org.dylanpiergies.${project.name.replace('-service', '').replace('-', '.')}.jooq"
                }
            }
        }
    }

    generateDbJooqSchemaSource.dependsOn flywayMigrate

    processResources {
        filter ReplaceTokens, tokens: [
            "db.schemaName": schemaName
        ]
    }
}

configure(testProjects) {
    dependencies {
    	compile project(':common-jaxrs')
    	
    	compile 'org.springframework.boot:spring-boot-starter-test'
        compile 'com.shazam:shazamcrest'
        compile 'org.fluttercode.datafactory:datafactory'
    }
}
