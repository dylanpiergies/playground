import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE'
        classpath 'nu.studer:gradle-jooq-plugin:2.0.7'
        classpath 'gradle.plugin.com.boxfuse.client:flyway-release:4.2.0'
        classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.6.2'
    }
}

apply plugin: 'docker-compose'

ext {
    tlsCertsDir = file("${project(':tls-test-certs').projectDir}/certs")
    tlsHostKeystore = file("$tlsCertsDir/host_keystore.jks")
    tlsClientKeystore = file("$tlsCertsDir/client.p12")
    tlsTruststore = file("$tlsCertsDir/truststore.jks")
    tlsPassword = 'tlspassword'
}

allprojects {
    buildscript {
        repositories {
            maven {
                url 'https://plugins.gradle.org/m2/'
            }
        }
    }

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'docker-compose'

    repositories {
        jcenter()
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.boot:spring-boot-dependencies:1.5.7.RELEASE'
        }

        dependencies {
            dependency 'com.h2database:h2:1.4.196'
            dependency 'com.shazam:shazamcrest:0.11'
            dependency 'javax.ws.rs:javax.ws.rs-api:2.1'
            dependency 'org.apache.commons:commons-lang3:3.7'
            dependency 'org.apache.cxf:cxf-spring-boot-starter-jaxrs:3.2.0'
            dependency 'org.fluttercode.datafactory:datafactory:0.8'
            dependency 'org.flywaydb:flyway-core:4.2.0'
            dependency 'org.postgresql:postgresql:42.1.4'

        }
    }

    group = 'org.dylanpiergies.contacts'
    version = '0.0.1-SNAPSHOT'

    tasks.withType(AbstractArchiveTask) {
        // Exclude version number from archive names to simplify Docker deployment
        version = null
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.8'
        options.encoding = 'UTF-8'
    }

    def composeFiles = ["$rootDir/docker-compose.yml"]

    dockerCompose {
        useComposeFiles = composeFiles
        forceRecreate = true
        captureContainersOutput = true
    }
}

// Add API projects to this list. Common configuration will be applied to them.
Set<Project> apiProjects = [
    project(':contacts-api')
]

// Add frontend service projects to this list. Common configuration will be applied to them.
Set<Project> frontendServiceProjects = [
    project(':contacts-frontend-service')
]

// Add backend service projects to this list. They will be configured with database access capabilities.
Set<Project> jooqProjects = [
    project(':contacts-backend-service')
]

// Add all Java projects to this list. Common configuration will be applied to them.
Set<Project> javaProjects = apiProjects + frontendServiceProjects + jooqProjects + [
    project(':common-spring-config-jaxrs'),
    project(':common-spring-config-jooq'),
    project(':spring-boot-cxf-jaxrs-utils')
]

// Common configuration for all Java projects
configure(javaProjects) {
    apply plugin: 'java'
    apply plugin: 'jacoco'
}

// Common configuration for API projects
configure(apiProjects) {
    dependencies {
        compile 'javax.ws.rs:javax.ws.rs-api'
        compile 'javax.validation:validation-api'
    }
}

// Common configuration for service projects
configure(frontendServiceProjects + jooqProjects) {
    apply plugin: 'org.springframework.boot'

    dependencies {
        compile project(':common-spring-config-jaxrs')

        compile 'org.springframework.boot:spring-boot-starter'
        compile 'org.springframework.boot:spring-boot-starter-web'
//        compile 'org.springframework.boot:spring-boot-starter-jetty'
        compile 'org.springframework.boot:spring-boot-starter-actuator'
        compile 'org.springframework.boot:spring-boot-starter-validation'
        compile 'org.springframework.boot:spring-boot-starter-security'

        compile project(':spring-boot-cxf-jaxrs-utils')

        compile 'org.springframework.boot:spring-boot-devtools'

        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'com.shazam:shazamcrest'
        testCompile 'org.fluttercode.datafactory:datafactory'
    }

    bootRun {
        args = ['--spring.profiles.active=dev']
    }

    processResources {
        filter ReplaceTokens, tokens: [
            "project.buildDir": project.buildDir.path
        ]
    }

    processTestResources {
        dependsOn ':tls-test-certs:build'

        filter ReplaceTokens, tokens: [
            "tls.hostKeystore"  : tlsHostKeystore.path,
            "tls.clientKeystore": tlsClientKeystore.path,
            "tls.truststore"    : tlsTruststore.path,
            "tls.password"      : tlsPassword
        ]
    }
}

// Common configuration for database accessing projects
configure(jooqProjects) {
    apply plugin: 'org.flywaydb.flyway'
    apply plugin: 'nu.studer.jooq'

    dependencies {
        compile project(':common-spring-config-jooq')
        compile 'org.flywaydb:flyway-core'

        runtime 'org.postgresql:postgresql'
        runtime 'com.h2database:h2'

        jooqRuntime 'org.postgresql:postgresql'
        jooqRuntime 'com.h2database:h2'
    }

    def schemaName = project.name.replace('-backend-service', '')
    def codegenDatabaseUrl = "jdbc:h2:$buildDir/db/codegen-db;INIT=CREATE SCHEMA IF NOT EXISTS \"$schemaName\"\\;SET SCHEMA \"$schemaName\""

    flyway {
        url = codegenDatabaseUrl
    }

    jooq {
        db(sourceSets.main) {
            jdbc {
                driver = 'org.h2.Driver'
                url = codegenDatabaseUrl
            }
            generator {
                name = 'org.jooq.util.DefaultGenerator'
                database {
                    name = 'org.jooq.util.h2.H2Database'
                    includes = '.*'
                    excludes = ''
                    inputSchema = schemaName
                }
                target {
                    packageName = "org.dylanpiergies.${project.name.replace('-service', '').replace('-', '.')}.db"
                }
            }
        }
    }

    generateDbJooqSchemaSource.dependsOn flywayMigrate

    processResources {
        filter ReplaceTokens, tokens: [
            "db.schemaName": schemaName
        ]
    }
}
